---
import For from '@global/component/for.astro';
import OpenGraphProfile from '@global/component/open_graph_profile.astro';
import Show from '@global/component/show.astro';
import { siteConfiguration } from '@global/configuration/site_configuration';
import { getLanguageFromUrl } from '@global/util/language';
import { removeTrailingSlash } from '@global/util/link';

import type {
  OpenGraphType,
  OpenGraphBookType,
  OpenGraphMediaType,
  OpenGraphTwitterType,
  OpenGraphArticleType,
  OpenGraphProfileType
} from '@global/type/open_graph_type.ts';

export type OpenGraphProps =
{
  title: string;
  description: string;
  type?: OpenGraphType;
  book?: OpenGraphBookType;
  image: OpenGraphMediaType[];
  twitter?: OpenGraphTwitterType;
  article?: OpenGraphArticleType;
  profile?: OpenGraphProfileType;
};

type Props = OpenGraphProps;

const {
  article,
  book,
  description,
  image,
  profile,
  title,
  twitter =
  {
    type: 'summary_large_image'
  },
  type = 'website'
} = Astro.props;

const baseUrl = removeTrailingSlash(Astro.site as URL);
const canonicalURL = removeTrailingSlash(new URL(Astro.url.pathname, Astro.site));
const { languages, siteName } = siteConfiguration;
const currentLanguage = getLanguageFromUrl(Astro.url);
---
<meta
  name='twitter:card'
  content={twitter.type}
/>
<Show when={twitter.site}>
  <meta
    name='twitter:site'
    content={twitter.site}
  />
</Show>
<Show when={twitter.creator}>
  <meta
    name='twitter:creator'
    content={twitter.creator}
  />
</Show>
<meta
  property='og:title'
  content={title}
/>
<meta
  property='og:type'
  content={type}
/>
<meta
  property='og:description'
  content={description}
/>
<meta
  property='og:url'
  content={canonicalURL}
/>
<meta
  property='og:site_name'
  content={siteName}
/>
<meta
  property='og:locale'
  content={currentLanguage}
/>
<Show when={Object.keys(languages).length > 0}>
  <For each={Object.keys(languages)}>
    {(dataLanguage: string) => (
      <meta
        property='og:locale:alternate'
        content={dataLanguage}
      />
    )}
  </For>
</Show>
<For each={image}>
  {(dataImage: OpenGraphMediaType) => (
    <>
      <meta
        property='og:image'
        content={`${baseUrl}${dataImage.url}`}
      />
      <Show when={dataImage.secureUrl}>
        <meta
          property='og:image:secure_url'
          content={`${baseUrl}${dataImage.url}`}
        />
      </Show>
      <Show when={dataImage.type}>
        <meta
          property='og:image:type'
          content={dataImage.type}
        />
      </Show>
      <Show when={dataImage.width}>
        <meta
          property='og:image:width'
          content={dataImage.width}
        />
      </Show>
      <Show when={dataImage.height}>
        <meta
          property='og:image:height'
          content={dataImage.height}
        />
      </Show>
      <Show when={dataImage.alt}>
        <meta
          property='og:image:alt'
          content={dataImage.alt}
        />
      </Show>
    </>
  )}
</For>
<Show when={type === 'article'}>
  <Show when={article?.publishedTime}>
    <meta
      property='article:published_time'
      content={article?.publishedTime}
    />
  </Show>
  <Show when={article?.modifiedTime}>
    <meta
      property='article:modified_time'
      content={article?.modifiedTime}
    />
  </Show>
  <Show when={article?.expirationTime}>
    <meta
      property='article:expiration_time'
      content={article?.expirationTime}
    />
  </Show>
  <Show when={(article?.author ?? [])?.length > 0}>
    <For each={article?.author}>
      {(dataAuthor: OpenGraphProfileType) => (
        <OpenGraphProfile
          firstName={dataAuthor?.firstName}
          gender={dataAuthor?.gender}
          lastName={dataAuthor?.lastName}
          username={dataAuthor?.username}
        />
      )}
    </For>
  </Show>
  <Show when={article?.section}>
    <meta
      property='article:section'
      content={article?.section}
    />
  </Show>
  <Show when={(article?.tag ?? [])?.length > 0}>
    <For each={article?.tag}>
      {(dataTag: string) => (
        <meta
          property='article:tag'
          content={dataTag}
        />
      )}
    </For>
  </Show>
</Show>
<Show when={type === 'book'}>
  <Show when={(book?.author ?? [])?.length > 0}>
    <For each={book?.author}>
      {(dataAuthor: OpenGraphProfileType) => (
        <OpenGraphProfile
          firstName={dataAuthor?.firstName}
          gender={dataAuthor?.gender}
          lastName={dataAuthor?.lastName}
          username={dataAuthor?.username}
        />
      )}
    </For>
  </Show>
  <Show when={book?.isbn}>
    <meta
      property='book:isbn'
      content={book?.isbn}
    />
  </Show>
  <Show when={book?.releaseDate}>
    <meta
      property='book:release_date'
      content={book?.releaseDate}
    />
  </Show>
  <Show when={(book?.tag ?? [])?.length > 0}>
    <For each={book?.tag}>
      {(dataTag: string) => (
        <meta
          property='book:tag'
          content={dataTag}
        />
      )}
    </For>
  </Show>
</Show>
<Show when={type === 'profile'}>
  <OpenGraphProfile
    firstName={profile?.firstName}
    gender={profile?.gender}
    lastName={profile?.lastName}
    username={profile?.username}
  />
</Show>