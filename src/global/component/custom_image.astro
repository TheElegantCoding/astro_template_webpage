---
import Show from '@global/component/show.astro';
import Skeleton from '@global/component/skeleton.astro';
import { removeTrailingSlash } from '@global/util/link';
import { replaceExtension } from '@global/util/replace_extension';

import type { HTMLAttributes } from 'astro/types';

type Props = HTMLAttributes<'img'> &
{
  readonly src: string;
  readonly alt: string;
  readonly width: number;
  readonly class?: string;
  readonly height: number;
  readonly priority?: boolean;
  readonly disableLoader?: boolean;
  readonly formats?: Array<'avif' | 'webp'>;
  readonly classStyle?: Partial<Record<'skeleton' | 'container', string>>;
};

const {
  alt,
  class: classImage,
  classStyle,
  disableLoader,
  formats = [ 'avif', 'webp' ],
  height,
  priority = false,
  src: source,
  width,
  ...rest
} = Astro.props;

const baseUrl = removeTrailingSlash(Astro.site as URL);
const imageUrl = `${baseUrl}${source}`;
---
<div class='custom-image' class:list={[ classStyle?.container ]}>
  <picture>
    <Show when={formats.includes('avif')}>
      <source type='image/avif' srcset={replaceExtension(imageUrl, 'avif')} />
    </Show>
    <Show when={formats.includes('webp')}>
      <source type='image/webp' srcset={replaceExtension(imageUrl, 'webp')} />
    </Show>
    <img
      alt={alt}
      width={width}
      src={imageUrl}
      height={height}
      class:list={classImage}
      loading={priority ? 'eager' : 'lazy'}
      decoding={priority ? 'auto' : 'async'}
      fetchpriority={priority ? 'high' : 'auto'}
      {...rest}
    />
  </picture>
  <Show when={!disableLoader}>
    <Skeleton class='custom-image__skeleton' class:list={[ classStyle?.skeleton ]} />
  </Show>
  <Show when={Astro.slots.has('default')}>
    <div class='custom-image__content custom-image__content--disable'>
      <slot />
    </div>
  </Show>
</div>

<script>
  const picture = document.querySelectorAll('.custom-image');

  picture.forEach((element) =>
  {
    const image = element.querySelector('img');

    const onImageLoad = () =>
    {
      const skeleton = element.querySelector('.custom-image__skeleton');
      const content = element.querySelector('.custom-image__content');

      skeleton?.classList.remove('skeleton--active');
      content?.classList.remove('custom-image__content--disable');
    };

    const onImageError = (event: Event) =>
    {
      const currentImage = event.currentTarget as HTMLImageElement;

      currentImage.src = image?.src as string;
    };

    if(image?.complete)
    {
      onImageLoad();
    }
    else
    {
      image?.addEventListener('load', onImageLoad);
      image?.addEventListener('error', onImageError);
    }
  });
</script>